//
//  StatsDetailPresenter.swift
//  i9
//
//  Created by Marcelo Antunes on 12/26/18.
//  Copyright (c) 2018 Crédito Agrícola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Domain

protocol StatsDetailPresentationLogic: BasePresentationLogic {
    func presentError(response: i9.Error.Response)
    func presentLoading(response: i9.Loading.Response)
    func presentScreen(response: StatsDetail.DisplayScreen.Response)
    func presentInfo(response: StatsDetail.Info.Response)
}

class StatsDetailPresenter: BasePresenter, StatsDetailPresentationLogic {
    weak var viewController: StatsDetailDisplayLogic!

    override func baseDisplayLogicImpl() -> BaseDisplayLogic? { return viewController }

    private let partialMaxNumber = 4
    private var tableItems: [Stats.TableItem] = []

    // MARK: Present Screen

    func presentScreen(response: StatsDetail.DisplayScreen.Response) {
        let viewModel = StatsDetail.DisplayScreen.ViewModel(lottieAnimation: "Asinhas", cloudTitle: "stats_categories_footer_clouds_no_moves".localized,
                                                            seeAllButtonTitle: "stats_categories_footer_button_text".localized)
        viewController.displayScreen(viewModel: viewModel)
    }

    func presentInfo(response: StatsDetail.Info.Response) {
        let categoryGroupColor = response.info.categoryGroupColor

        let headerImages = response.info.headerImages
        let headerTitle = response.info.headerTitle

        let monthString = response.period.userFriendlyDescription.uppercased()

        let amountString = response.info.headerTotalAmount.description
        let maxAmountString = response.info.headerMaxAmount.description

        let subtitle = "stats_category_details_subtitle".localizedWithFormat(arguments: monthString, amountString, maxAmountString)

        let numberString = response.info.headerTransactionsCount.localizedPlural("transactions_count")

        let percentageValue = response.info.headerPercentageValue
        let percentageString = percentageValue.percentageDescription()
        let title = response.showCategoryInTitle ? response.info.category?.name ?? headerTitle : headerTitle
        let category = response.showCategoryInTitle ? response.info.category : nil
        let headerInfo = StatsDetail.HeaderInfo(
            categoryGroupColor: categoryGroupColor,
            category: category,
            images: headerImages,
            title: title,
            subtitle: subtitle,
            fakeCellTitle: headerTitle,
            fakeCellMonth: monthString,
            fakeCellAmount: amountString,
            fakeCellTransactionsCount: numberString,
            fakeCellPercentageString: percentageString,
            fakeCellPercentageValue: percentageValue)

        tableItems = response.info.workerListModel.compactMap { workerItem -> Stats.TableItem? in
            let images = workerItem.images
            let title = workerItem.title

            let subtitle = workerItem.transactionsCount > 0 ? workerItem.transactionsCount.localizedPlural("transactions_count") : nil

            let expensesAmount = workerItem.amount.description
            let expensesPercentageValue = workerItem.percentageValue

            return Stats.TableItem(
                id: workerItem.id,
                images: images,
                title: title,
                subtitle: subtitle,
                date: workerItem.date,
                categoryColor: workerItem.categoryGroupColor,
                expensesAmount: expensesAmount,
                expensesPercentageValue: expensesPercentageValue)
        }

        let viewModel = StatsDetail.Info.ViewModel(
            showCurrentTimeInTransactionGroup: response.showCurrentTimeInTransactionGroup,
            headerInfo: headerInfo,
            tableItems: tableItems)
        viewController.displayInfo(viewModel: viewModel)
    }
}
