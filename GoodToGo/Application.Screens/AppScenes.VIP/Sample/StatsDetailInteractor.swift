//
//  StatsDetailInteractor.swift
//  i9
//
//  Created by Marcelo Antunes on 12/26/18.
//  Copyright (c) 2018 Crédito Agrícola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Domain
import Storage
import RxSwift
import Designables
import SwifterSwift

protocol StatsDetailBusinessLogic {
    func fetchScreen(request: StatsDetail.DisplayScreen.Request)
    func fetchInfo()
}

protocol StatsDetailDataStore {
    var id: StatsDetailId! { get set }
    var transactionType: TransactionType { get set }
    var currentPeriod: StatsPeriodScreenModelHolder? { get set }
}

class StatsDetailInteractor: BaseInteractor, StatsDetailBusinessLogic, StatsDetailDataStore {

    var presenter: StatsDetailPresentationLogic!

    var id: StatsDetailId!
    var transactionType: TransactionType = .expense
    var currentPeriod: StatsPeriodScreenModelHolder?

    override func basePresentationLogicImpl() -> BasePresentationLogic? { return presenter }

    // MARK: Fetch Screen

    func fetchScreen(request: StatsDetail.DisplayScreen.Request) {
        let response = StatsDetail.DisplayScreen.Response()
        presenter.presentScreen(response: response)
    }

    func fetchInfo() {
        guard let period = currentPeriod?.period,
              let data = currentPeriod?.stats.value,
              let model = workerModel(period, data) else {
            return
        }
        presentWorkerModel(period, data, model)
    }

    private func workerModel(_ period: StatsPeriod, _ data: StatsValuesModel) -> StatsDetail.WorkerModel? {
        switch id! {
        case let .group(id):
            return buildWorkerModelForGroup(transactionType, period, data, id)
        case let .category(id):
            return buildWorkerModelForCategory(transactionType, period, data, id)
        case let .transactionsFromGroup(id):
            return buildWorkerModelForTransactionsFromGroup(transactionType, period, data, id)
        }
    }

    private func buildWorkerModelForTransactionsFromGroup(_ type: TransactionType,
                                                          _ period: StatsPeriod,
                                                          _ data: StatsValuesModel,
                                                          _ id: String) -> StatsDetail.WorkerModel? {
        guard let transaction = (data.transactionsFor(type).first { $0.entityInfo.id.lowercased() == id.lowercased()  }) else {
            return nil
        }
        let transactions: [Transaction] = data.transactionsFor(type, transaction.entityInfo)
        let category = transaction.category
        let entityInfo = transaction.entityInfo

        let color = entityInfo.color
        let images: [AvatarImage] = entityInfo.image.avatars
        let title = entityInfo.name
        let maxAmountInStats = data.amountFor(type)
        let maxAmount = data.transactionsFor(type)
            .filteredByCategory(category)
            .total(currencyCode: maxAmountInStats.currencyCode)
        let totalAmount = transactions.total(currencyCode: maxAmount.currencyCode)
        let transactionsCount = transactions.count
        let percentage: Float = (totalAmount.value / maxAmount.value).floatValue

        let list: [StatsDetail.WorkerModel.WorkerItem] = transactions
            .map {
                let id = $0.id
                let categoryGroupColor = entityInfo.color
                let images: [AvatarImage] = entityInfo.image.avatars
                let title = entityInfo.name
                let date: Date? = $0.date
                let transactionsCount: Int = 0
                let percentage:Float? = nil
                return StatsDetail.WorkerModel.WorkerItem(id: id,
                                                          categoryGroupColor: categoryGroupColor,
                                                          images: images,
                                                          title: title,
                                                          date: date,
                                                          transactionsCount: transactionsCount,
                                                          amount: $0.amount,
                                                          percentageValue: percentage)

            }
            .displaySorted()

        return StatsDetail.WorkerModel(categoryGroupColor: color,
                                       headerImages: images,
                                       headerTitle: title,
                                       headerTotalAmount: totalAmount,
                                       headerMaxAmount: maxAmount,
                                       headerTransactionsCount: transactionsCount,
                                       headerPercentageValue: percentage,
                                       category: category,
                                       workerListModel: list)
    }

    private func buildWorkerModelForCategory(_ type: TransactionType,
                                             _ period: StatsPeriod,
                                             _ data: StatsValuesModel,
                                             _ id: String) -> StatsDetail.WorkerModel? {
        let categoryId = Int(id)!
        guard let category = (data.groupedByCategoryFor(type).keys.first { $0.id == categoryId }),
              let transactions: [Transaction] = data.groupedByCategoryFor(type)[category] else {
            return nil
        }

        let color = category.color
        let images: [AvatarImage] = [.category(category.image, color, circleCrop: true)]
        let title = category.name
        let amount = data.amountFor(type)
        let maxAmount = data.transactionsFor(type).filteredByCategoryGroup(category.group).sum(currencyCode: amount.currencyCode)
        let totalAmount = transactions.total(currencyCode: maxAmount.currencyCode)
        let transactionsCount = transactions.count
        let percentage = (totalAmount.value / maxAmount.value).floatValue

        let transactionsGroupedByEntity = transactions.groupByKey(keyForValue: {
            $0.entityInfo
        })
        let list: [StatsDetail.WorkerModel.WorkerItem] = transactionsGroupedByEntity
            .keys
            .map {
                let id = $0.id
                let categoryGroupColor = $0.color
                let images: [AvatarImage] = $0.image.avatars
                let title = $0.name
                let date: Date? = nil
                let transactionsCount: Int = transactionsGroupedByEntity[$0]?.count ?? 0

                let amount = transactionsGroupedByEntity[$0]?.total(currencyCode: maxAmount.currencyCode) ?? Amount(value: 0,
                                                                                                                    currencyCode: maxAmount.currencyCode)
                let percentage = (amount.value / totalAmount.value).floatValue
                return StatsDetail.WorkerModel.WorkerItem(id: id,
                                                          categoryGroupColor: categoryGroupColor,
                                                          images: images,
                                                          title: title,
                                                          date: date,
                                                          transactionsCount: transactionsCount,
                                                          amount: amount,
                                                          percentageValue: percentage)

            }
            .displaySorted()

        return StatsDetail.WorkerModel(categoryGroupColor: color,
                                       headerImages: images,
                                       headerTitle: title,
                                       headerTotalAmount: totalAmount,
                                       headerMaxAmount: maxAmount,
                                       headerTransactionsCount: transactionsCount,
                                       headerPercentageValue: percentage,
                                       category: category,
                                       workerListModel: list)
    }

    private func buildWorkerModelForGroup(_ type: TransactionType,
                                          _ period: StatsPeriod,
                                          _ data: StatsValuesModel,
                                          _ id: String) -> StatsDetail.WorkerModel? {

        let groupId = Int(id)
        let groups = data.groupedByCategoryFamilyFor(type)
        guard let categoryFamily = (groups.keys.first { $0.id == groupId }) else {
            return nil
        }
        let transactions: [Transaction] = groups[categoryFamily] ?? []

        let color = categoryFamily.color
        let images: [AvatarImage] = [.category(categoryFamily.image, categoryFamily.color, circleCrop: true)]
        let title = categoryFamily.name
        let maxAmount = data.amountFor(type)
        let totalAmount = transactions.total(currencyCode: maxAmount.currencyCode)
        let transactionsCount = transactions.count
        let percentage = (totalAmount.value / maxAmount.value).floatValue
        let category: Domain.TransactionCategory? = nil

        let transactionsGroupedByCategory = transactions.groupByKey(keyForValue: {
            $0.category
        })

        let list: [StatsDetail.WorkerModel.WorkerItem] = transactionsGroupedByCategory
            .keys
            .map {
                let id = $0.id.string
                let categoryGroupColor = $0.color
                let images: [AvatarImage] = [.local($0.image)]
                let title = $0.name
                let date: Date? = nil
                let transactionsCount: Int = transactionsGroupedByCategory[$0]?.count ?? 0
                let amount = transactionsGroupedByCategory[$0]?.total(currencyCode: maxAmount.currencyCode) ?? Amount(value: 0,
                                                                                                                      currencyCode: maxAmount.currencyCode)
                let percentage = (amount.value / totalAmount.value).floatValue
                return StatsDetail.WorkerModel.WorkerItem(id: id,
                                                          categoryGroupColor: categoryGroupColor,
                                                          images: images,
                                                          title: title,
                                                          date: date,
                                                          transactionsCount: transactionsCount,
                                                          amount: amount,
                                                          percentageValue: percentage)
            }
            .displaySorted()

        return StatsDetail.WorkerModel(categoryGroupColor: color,
                                       headerImages: images,
                                       headerTitle: title,
                                       headerTotalAmount: totalAmount,
                                       headerMaxAmount: maxAmount,
                                       headerTransactionsCount: transactionsCount,
                                       headerPercentageValue: percentage,
                                       category: category,
                                       workerListModel: list)
    }

    private func presentWorkerModel(_ period: StatsPeriod,
                                    _ data: StatsValuesModel,
                                    _ model: StatsDetail.WorkerModel) {

        let response = StatsDetail.Info.Response(showCategoryInTitle: id.showCategoryInTitle,
                                                 showCurrentTimeInTransactionGroup: id.showTime,
                                                 period: period,
                                                 info: model)
        self.presenter.presentInfo(response: response)

    }

}
